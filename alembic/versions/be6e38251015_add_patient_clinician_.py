"""add patient, clinician, cliniciansuperuser models

Revision ID: be6e38251015
Revises: 702564f938a7
Create Date: 2024-03-29 18:28:17.417068

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'be6e38251015'
down_revision: Union[str, None] = '702564f938a7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('clinician_superusers')
    op.drop_table('clinicians')
    op.drop_table('patients')
    op.add_column('appointments', sa.Column('patient_id', sa.Integer(), nullable=True))
    op.add_column('appointments', sa.Column('clinician_id', sa.Integer(), nullable=True))
    op.drop_constraint('appointments_user_id_fkey', 'appointments', type_='foreignkey')
    op.create_foreign_key(None, 'appointments', 'users', ['patient_id'], ['id'])
    op.create_foreign_key(None, 'appointments', 'users', ['clinician_id'], ['id'])
    op.drop_column('appointments', 'user_id')
    op.add_column('billings', sa.Column('patient_id', sa.Integer(), nullable=True))
    op.add_column('billings', sa.Column('clinician_id', sa.Integer(), nullable=True))
    op.add_column('billings', sa.Column('description', sa.String(), nullable=True))
    op.add_column('billings', sa.Column('is_paid', sa.Boolean(), nullable=True))
    op.alter_column('billings', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('billings', 'date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.drop_constraint('billings_user_id_fkey', 'billings', type_='foreignkey')
    op.create_foreign_key(None, 'billings', 'users', ['clinician_id'], ['id'])
    op.create_foreign_key(None, 'billings', 'users', ['patient_id'], ['id'])
    op.drop_column('billings', 'paid')
    op.drop_column('billings', 'user_id')
    op.add_column('medical_records', sa.Column('patient_id', sa.Integer(), nullable=True))
    op.add_column('medical_records', sa.Column('record_data', sa.String(), nullable=True))
    op.drop_constraint('medical_records_user_id_fkey', 'medical_records', type_='foreignkey')
    op.create_foreign_key(None, 'medical_records', 'users', ['patient_id'], ['id'])
    op.drop_column('medical_records', 'record')
    op.drop_column('medical_records', 'user_id')
    op.add_column('notes', sa.Column('patient_id', sa.Integer(), nullable=True))
    op.add_column('notes', sa.Column('note_content', sa.String(), nullable=True))
    op.add_column('notes', sa.Column('date', sa.Date(), nullable=True))
    op.create_foreign_key(None, 'notes', 'users', ['patient_id'], ['id'])
    op.drop_column('notes', 'content')
    op.drop_column('notes', 'created_at')
    op.add_column('users', sa.Column('dob', sa.Date(), nullable=True))
    op.add_column('users', sa.Column('user_type', sa.String(), nullable=True))
    op.add_column('users', sa.Column('gender', sa.String(), nullable=True))
    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))
    op.add_column('users', sa.Column('emergency_contact', sa.String(), nullable=True))
    op.add_column('users', sa.Column('specialization', sa.String(), nullable=True))
    op.add_column('users', sa.Column('license_number', sa.String(), nullable=True))
    op.drop_column('users', 'is_clinician')
    op.drop_column('users', 'is_admin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_clinician', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('users', 'license_number')
    op.drop_column('users', 'specialization')
    op.drop_column('users', 'emergency_contact')
    op.drop_column('users', 'phone_number')
    op.drop_column('users', 'gender')
    op.drop_column('users', 'user_type')
    op.drop_column('users', 'dob')
    op.add_column('notes', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('notes', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'notes', type_='foreignkey')
    op.drop_column('notes', 'date')
    op.drop_column('notes', 'note_content')
    op.drop_column('notes', 'patient_id')
    op.add_column('medical_records', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('medical_records', sa.Column('record', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'medical_records', type_='foreignkey')
    op.create_foreign_key('medical_records_user_id_fkey', 'medical_records', 'users', ['user_id'], ['id'])
    op.drop_column('medical_records', 'record_data')
    op.drop_column('medical_records', 'patient_id')
    op.add_column('billings', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('billings', sa.Column('paid', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'billings', type_='foreignkey')
    op.drop_constraint(None, 'billings', type_='foreignkey')
    op.create_foreign_key('billings_user_id_fkey', 'billings', 'users', ['user_id'], ['id'])
    op.alter_column('billings', 'date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('billings', 'amount',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.drop_column('billings', 'is_paid')
    op.drop_column('billings', 'description')
    op.drop_column('billings', 'clinician_id')
    op.drop_column('billings', 'patient_id')
    op.add_column('appointments', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.create_foreign_key('appointments_user_id_fkey', 'appointments', 'users', ['user_id'], ['id'])
    op.drop_column('appointments', 'clinician_id')
    op.drop_column('appointments', 'patient_id')
    op.create_table('patients',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('emergency_contact', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], name='patients_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='patients_pkey')
    )
    op.create_table('clinicians',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('specialization', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['users.id'], name='clinicians_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clinicians_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('clinician_superusers',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['clinicians.id'], name='clinician_superusers_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clinician_superusers_pkey')
    )
    # ### end Alembic commands ###
